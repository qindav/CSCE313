/*
    Based on original assignment by: Dr. R. Bettati, PhD
    Department of Computer Science
    Texas A&M University
    Date  : 2013/01/31
 */


#include <iostream>
#include <fstream>
#include <cstring>
#include <string>
#include <sstream>
#include <iomanip>

#include <sys/time.h>
#include <cassert>
#include <assert.h>
#include <chrono>

#include <cmath>
#include <numeric>
#include <algorithm>

#include <list>
#include <vector>

#include <sys/types.h>
#include <sys/stat.h>
#include <errno.h>
#include <unistd.h>
#include <pthread.h>
#include <signal.h>

#include "reqchannel.h"
#include "BoundedBuffer.h"
#include "Histogram.h"
using namespace std;

 //static void DisplayHis(int sig, siginfo_t *siginfo, void *context);

struct reqThread{
    int n;
    string clientName;
    BoundedBuffer *buffer;
};

struct workThread{
    int ID;
    int workload;

    BoundedBuffer *requestBuffer;
    RequestChannel* workerChannel;
    
    BoundedBuffer *b1;
    BoundedBuffer *b2;
    BoundedBuffer *b3;

    
};

struct statisticsThread{
    int n;
    string request;
    BoundedBuffer *responseBuffer;
    Histogram *hist;
  
}input1,input2,input3;


void* request_thread_function(void* arg) {
     
	reqThread *input = (reqThread*)arg;
   
	
    for(int i = 0; i < (*input).n; ++i) {
     (*input).buffer->push("data " + (*input).clientName);
      cout << (*input).clientName;
      cout << "-push request:";
      cout << i<<endl;
      
    }
    pthread_exit(NULL);
}


void* worker_thread_function(void* arg) {
  
    	
    workThread *input = (workThread*)arg;
    
    RequestChannel* workerChannel = (*input).workerChannel;

    while(true) {
        for(int i=0; i<(*input).workload; ++i){
        string request = (*input).requestBuffer->pop();

		workerChannel->cwrite(request);
		
		if(request == "quit") {
			delete workerChannel;
            break;
        }
        else{
        	string response = workerChannel->cread();
    		BoundedBuffer *rb;
	    	if(request == "data John Smith"){
		        rb =  (*input).b1;
		    }
		    else if(request == "data Jane Smith"){
		        rb =  (*input).b2;
		    }
		    else if(request == "data Joe Smith"){
		        rb =  (*input).b3;
		    }
		
			rb->push(response);
			cout<<"Response with request w:" + request + " R:" +response<<endl;
			
		}
        }
        break;
    }
    
}

void* stat_thread_function(void* arg) {
    statisticsThread *input = (statisticsThread*)arg;
    Histogram *hist = (*input).hist;
    for(int i = 0; i < (*input).n; ++i) {
        string response = (*input).responseBuffer->pop();
        hist->update ((*input).request, response);
        cout<<(*input).request + ":update:" + response <<endl;
    }
    hist->print();
}


/*--------------------------------------------------------------------------*/
/* MAIN FUNCTION */
/*--------------------------------------------------------------------------*/

int main(int argc, char * argv[]) {
    int n = 2; //default number of requests per "patient"
    int w = 1; //default number of worker threads
    int b = 3 * n; // default capacity of the request buffer, you should change this default
    int opt = 0;
     
    auto start = std::chrono::steady_clock::now();
    while ((opt = getopt(argc, argv, "n:w:b:")) != -1) {
        switch (opt) {
            case 'n':
                n = atoi(optarg);
                break;
            case 'w':
                w = atoi(optarg); //This won't do a whole lot until you fill in the worker thread function
                break;
            case 'b':
                b = atoi (optarg);
                break;
		}
    }

/*
    struct sigaction act;
    act.sa_sigaction = &DisplayHis;
    act.sa_flags = SA_SIGINFO;
    
    if(sigaction(SIGALRM, &act, NULL)<0){
         EXITONERROR ("");
    }
    timer_t timerid; timer_create(CLOCK_REALTIME, NULL, &timerid);
    struct itimerspec value; 
    value.it_interval.tv_sec = 2; 
    value.it_interval.tv_nsec = 0; 
    value.it_value.tv_sec = 0; 
    value.it_value.tv_nsec = 0; 
*/

    int pid = fork();
	if (pid == 0){
		execl("dataserver", (char*) NULL);
	}
	else {

        cout << "n == " << n << endl;
        cout << "w == " << w << endl;
        cout << "b == " << b << endl;

        cout << "CLIENT STARTED:" << endl;
        cout << "Establishing control channel... " << flush;
        RequestChannel *chan = new RequestChannel("control", RequestChannel::CLIENT_SIDE);
        cout << "done." << endl<< flush;

        
        
		BoundedBuffer request_buffer(b);
		Histogram hist;
		
		
		reqThread John;
		reqThread Joe,Jane;

        //create 3 request threads
        void *res;
        
        John.n = n; 
        John.clientName = "John Smith"; 
        John.buffer = &request_buffer;
      
        pthread_t thread_id_John;
	    if (pthread_create(& thread_id_John, NULL, request_thread_function, (void*)&John) < 0 ) {
		   EXITONERROR ("");
     	}

      	Jane.n = n; Jane.clientName = "Jane Smith"; Jane.buffer = &request_buffer;
     	pthread_t thread_id_Jane;
	    if (pthread_create(& thread_id_Jane, NULL, request_thread_function,(void*)&Jane) < 0 ) {
		   EXITONERROR ("");
     	}
   
	    Joe.n = n; Joe.clientName = "Joe Smith"; Joe.buffer = &request_buffer;
     	pthread_t thread_id_Joe;
	    if (pthread_create(& thread_id_Joe , NULL, request_thread_function, (void*)&Joe) < 0 ) {
		   EXITONERROR ("");
     	}
     
	    vector<RequestChannel*> workerChannels;
	    vector<pthread_t> workingThreadIDs;
	    vector<BoundedBuffer *> responseBuffers;
	    
	    BoundedBuffer* response_buffer1 = new BoundedBuffer(n);
	    BoundedBuffer* response_buffer2 = new BoundedBuffer(n);
	    BoundedBuffer* response_buffer3 = new BoundedBuffer(n);

	    RequestChannel* workerChannel;
		pthread_t thread_id_Work;
		
	    for(int i = 0; i < w; ++i) {
	       
            chan->cwrite("newchannel");
            string s = chan->cread ();
           
            workerChannel= new RequestChannel(s, RequestChannel::CLIENT_SIDE);
            workerChannels.push_back(workerChannel);
          
            workThread inputs;
          
            inputs.workload = 3*n;
            inputs.ID = w; 
            inputs.workerChannel = workerChannel;
            inputs.requestBuffer = &request_buffer;
            inputs.b1 = response_buffer1;
            inputs.b2 = response_buffer2;
            inputs.b3 = response_buffer3;

            if (pthread_create(&thread_id_Work, NULL, worker_thread_function, (void*)&inputs) < 0 ) {
		        EXITONERROR ("");
     	    }
            workingThreadIDs.push_back(thread_id_Work);
        }
        
      
        //creates stats
        input1.hist = &hist;
        input1.responseBuffer = response_buffer1;
        input1.n=n;
        input1.request = "data John Smith"; 
        
        input2.hist = &hist;
        input2.responseBuffer = response_buffer2;
        input2.n=n;
        input2.request = "data Jane Smith"; 
        
        input3.hist = &hist;
        input3.responseBuffer = response_buffer3;
        input3.n=n;
        input3.request = "data Joe Smith"; 
       
       
        usleep(2000);
        pthread_t s1,s2,s3;
        pthread_create(&s1, NULL, stat_thread_function, (void*)&input1);
        pthread_create(&s2, NULL, stat_thread_function, (void*)&input2);
        pthread_create(&s3, NULL, stat_thread_function, (void*)&input3);
        
        //Join threads
        pthread_join(s1, 0);
        pthread_join(s2, 0);
        pthread_join(s3, 0);
        
    
        pthread_join(thread_id_John, 0);
        pthread_join(thread_id_Joe, 0);
        pthread_join(thread_id_Jane, 0);
        
        cout << "Done populating request buffer" << endl;
        cout << "Pushing quit requests... ";
        for(int i = 0; i < w; ++i) {
            request_buffer.push("quit");
        }
        cout << "done." << endl;



        for(int i = 0; i < w; ++i) {
            pthread_t thread_id_Work = workingThreadIDs[i];
            pthread_join(thread_id_Work, 0);
        }
        
      
	 
        //delete control
        chan->cwrite ("quit");
        delete chan;
        cout << "All Done!!!" << endl;
        auto end = std::chrono::steady_clock::now();
        double nsec = std::chrono::nanoseconds(end - start).count();
        cout << "Time taken: " << nsec/1000000000.0 << "s" << std::endl;
		hist.print ();
    }
}

static void DisplayHis(int sig, siginfo_t *siginfo, void *context){
    
}
